{"version":3,"names":["runAndroid","_argv","config","args","link","setPlatform","packager","port","packagerStatus","isPackagerRunning","status","root","logAlreadyRunningBundler","result","handlePortUnavailable","startServerInNewWindow","reactNativePath","terminal","reactNativeVersion","setVersion","binaryPath","tasks","CLIError","path","isAbsolute","join","fs","existsSync","androidProject","getAndroidProject","mainActivity","buildAndRun","defaultPort","getAvailableDevicePort","adbPath","getAdbPath","devices","adb","getDevices","some","d","includes","toString","process","chdir","sourceDir","cmd","platform","startsWith","selectedTask","interactive","task","promptForTaskSelection","listDevices","deviceId","logger","warn","device","listAndroidDevices","users","checkUsers","length","user","promptForUser","id","connected","runOnSpecificDevice","emulator","info","tryLaunchEmulator","readableName","success","chalk","dim","error","runOnAllDevices","buildTask","replace","indexOf","gradleArgs","getTaskNames","appName","mode","push","extraParams","activeArchOnly","architecture","getCPU","build","installAndLaunchOnDevice","selectedDevice","tryRunAdbReverse","tryInstallAppOnDevice","tryLaunchAppOnDevice","name","description","func","options","default","env","RCT_METRO_PORT","parse","Number","getDefaultUserTerminal"],"sources":["../../../src/commands/runAndroid/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport fs from 'fs';\nimport {Config} from '@react-native-community/cli-types';\nimport adb from './adb';\nimport runOnAllDevices from './runOnAllDevices';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport tryInstallAppOnDevice from './tryInstallAppOnDevice';\nimport getAdbPath from './getAdbPath';\nimport {\n  logger,\n  CLIError,\n  link,\n  getDefaultUserTerminal,\n  isPackagerRunning,\n  logAlreadyRunningBundler,\n  startServerInNewWindow,\n  handlePortUnavailable,\n} from '@react-native-community/cli-tools';\nimport {getAndroidProject} from '../../config/getAndroidProject';\nimport listAndroidDevices from './listAndroidDevices';\nimport tryLaunchEmulator from './tryLaunchEmulator';\nimport chalk from 'chalk';\nimport path from 'path';\nimport {build, BuildFlags, options} from '../buildAndroid';\nimport {promptForTaskSelection} from './listAndroidTasks';\nimport {getTaskNames} from './getTaskNames';\nimport {checkUsers, promptForUser} from './listAndroidUsers';\n\nexport interface Flags extends BuildFlags {\n  appId: string;\n  appIdSuffix: string;\n  mainActivity: string;\n  port: number;\n  terminal?: string;\n  packager?: boolean;\n  deviceId?: string;\n  listDevices?: boolean;\n  binaryPath?: string;\n  user?: number | string;\n}\n\nexport type AndroidProject = NonNullable<Config['project']['android']>;\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv: Array<string>, config: Config, args: Flags) {\n  link.setPlatform('android');\n\n  let {packager, port} = args;\n\n  const packagerStatus = await isPackagerRunning(port);\n\n  if (\n    typeof packagerStatus === 'object' &&\n    packagerStatus.status === 'running'\n  ) {\n    if (packagerStatus.root === config.root) {\n      packager = false;\n      logAlreadyRunningBundler(port);\n    } else {\n      const result = await handlePortUnavailable(port, config.root, packager);\n      [port, packager] = [result.port, result.packager];\n    }\n  } else if (packagerStatus === 'unrecognized') {\n    const result = await handlePortUnavailable(port, config.root, packager);\n    [port, packager] = [result.port, result.packager];\n  }\n\n  if (packager) {\n    await startServerInNewWindow(\n      port,\n      config.root,\n      config.reactNativePath,\n      args.terminal,\n    );\n  }\n\n  if (config.reactNativeVersion !== 'unknown') {\n    link.setVersion(config.reactNativeVersion);\n  }\n\n  if (args.binaryPath) {\n    if (args.tasks) {\n      throw new CLIError(\n        'binary-path and tasks were specified, but they are not compatible. Specify only one',\n      );\n    }\n\n    args.binaryPath = path.isAbsolute(args.binaryPath)\n      ? args.binaryPath\n      : path.join(config.root, args.binaryPath);\n\n    if (args.binaryPath && !fs.existsSync(args.binaryPath)) {\n      throw new CLIError(\n        'binary-path was specified, but the file was not found.',\n      );\n    }\n  }\n\n  let androidProject = getAndroidProject(config);\n\n  if (args.mainActivity) {\n    androidProject.mainActivity = args.mainActivity;\n  }\n\n  return buildAndRun(args, androidProject);\n}\n\nconst defaultPort = 5552;\nasync function getAvailableDevicePort(\n  port: number = defaultPort,\n): Promise<number> {\n  /**\n   * The default value is 5554 for the first virtual device instance running on your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.\n   */\n  const adbPath = getAdbPath();\n  const devices = adb.getDevices(adbPath);\n  if (port > 5682) {\n    throw new CLIError('Failed to launch emulator...');\n  }\n  if (devices.some((d) => d.includes(port.toString()))) {\n    return await getAvailableDevicePort(port + 2);\n  }\n  return port;\n}\n\n// Builds the app and runs it on a connected emulator / device.\nasync function buildAndRun(args: Flags, androidProject: AndroidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n\n  const adbPath = getAdbPath();\n\n  let selectedTask;\n\n  if (args.interactive) {\n    const task = await promptForTaskSelection(\n      'install',\n      androidProject.sourceDir,\n    );\n    if (task) {\n      selectedTask = task;\n    }\n  }\n\n  if (args.listDevices || args.interactive) {\n    if (args.deviceId) {\n      logger.warn(\n        'Both \"deviceId\" and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one',\n      );\n    }\n\n    const device = await listAndroidDevices();\n    if (!device) {\n      throw new CLIError(\n        `Failed to select device, please try to run app without ${\n          args.listDevices ? 'list-devices' : 'interactive'\n        } command.`,\n      );\n    }\n\n    if (args.interactive) {\n      const users = checkUsers(device.deviceId as string, adbPath);\n      if (users && users.length > 1) {\n        const user = await promptForUser(users);\n\n        if (user) {\n          args.user = user.id;\n        }\n      }\n    }\n\n    if (device.connected) {\n      return runOnSpecificDevice(\n        {...args, deviceId: device.deviceId},\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    }\n\n    const port = await getAvailableDevicePort();\n    const emulator = `emulator-${port}`;\n    logger.info('Launching emulator...');\n    const result = await tryLaunchEmulator(adbPath, device.readableName, port);\n    if (result.success) {\n      logger.info('Successfully launched emulator.');\n      return runOnSpecificDevice(\n        {...args, deviceId: emulator},\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    }\n    throw new CLIError(\n      `Failed to launch emulator. Reason: ${chalk.dim(result.error || '')}`,\n    );\n  }\n\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, adbPath, androidProject, selectedTask);\n  } else {\n    return runOnAllDevices(args, cmd, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(\n  args: Flags,\n  adbPath: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  const devices = adb.getDevices(adbPath);\n  const {deviceId} = args;\n\n  // if coming from run-android command and we have selected task\n  // from interactive mode we need to create appropriate build task\n  // eg 'installRelease' -> 'assembleRelease'\n  const buildTask = selectedTask\n    ? [selectedTask.replace('install', 'assemble')]\n    : [];\n\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      let gradleArgs = getTaskNames(\n        androidProject.appName,\n        args.mode,\n        args.tasks ?? buildTask,\n        'install',\n        androidProject.sourceDir,\n      );\n\n      // using '-x lint' in order to ignore linting errors while building the apk\n      gradleArgs.push('-x', 'lint');\n      if (args.extraParams) {\n        gradleArgs.push(...args.extraParams);\n      }\n\n      if (args.port) {\n        gradleArgs.push(`-PreactNativeDevServerPort=${args.port}`);\n      }\n\n      if (args.activeArchOnly) {\n        const architecture = adb.getCPU(adbPath, deviceId);\n\n        if (architecture !== null) {\n          logger.info(`Detected architecture ${architecture}`);\n          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n          // Can be removed when 0.67 no longer needs to be supported.\n          gradleArgs.push(`-PreactNativeDebugArchitectures=${architecture}`);\n          gradleArgs.push(`-PreactNativeArchitectures=${architecture}`);\n        }\n      }\n\n      if (!args.binaryPath) {\n        build(gradleArgs, androidProject.sourceDir);\n      }\n\n      installAndLaunchOnDevice(\n        args,\n        deviceId,\n        adbPath,\n        androidProject,\n        selectedTask,\n      );\n    } else {\n      logger.error(\n        `Could not find device with the id: \"${deviceId}\". Please choose one of the following:`,\n        ...devices,\n      );\n    }\n  } else {\n    logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction installAndLaunchOnDevice(\n  args: Flags,\n  selectedDevice: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n  selectedTask?: string,\n) {\n  tryRunAdbReverse(args.port, selectedDevice);\n\n  tryInstallAppOnDevice(\n    args,\n    adbPath,\n    selectedDevice,\n    androidProject,\n    selectedTask,\n  );\n\n  tryLaunchAppOnDevice(selectedDevice, androidProject, adbPath, args);\n}\n\nexport default {\n  name: 'run-android',\n  description:\n    'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [\n    ...options,\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while running the app',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal(),\n    },\n    {\n      name: '--appId <string>',\n      description:\n        'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n      default: '',\n    },\n    {\n      name: '--appIdSuffix <string>',\n      description: 'Specify an applicationIdSuffix to launch after build.',\n      default: '',\n    },\n    {\n      name: '--main-activity <string>',\n      description: 'Name of the activity to start',\n    },\n    {\n      name: '--deviceId <string>',\n      description:\n        'builds your app and starts it on a specific device/simulator with the ' +\n        'given device id (listed by running \"adb devices\" on the command line).',\n    },\n    {\n      name: '--list-devices',\n      description:\n        'Lists all available Android devices and simulators and let you choose one to run the app',\n      default: false,\n    },\n    {\n      name: '--binary-path <string>',\n      description:\n        'Path relative to project root where pre-built .apk binary lives.',\n    },\n    {\n      name: '--user <number>',\n      description: 'Id of the User Profile you want to install the app on.',\n      parse: Number,\n    },\n  ],\n};\n\nexport {adb, getAdbPath, listAndroidDevices, tryRunAdbReverse};\n"],"mappings":"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"}